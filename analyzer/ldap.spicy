# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.

module LDAP;

import ASN1;
import spicy;

# https://tools.ietf.org/html/rfc4511#
# https://ldap.com/ldapv3-wire-protocol-reference-asn1-ber/
# https://lapo.it/asn1js

#- Operation opcode ----------------------------------------------------------
public type ProtocolOpcode = enum {
  BIND_REQUEST            = 0,
  BIND_RESPONSE           = 1,
  UNBIND_REQUEST          = 2,
  SEARCH_REQUEST          = 3,
  SEARCH_RESULT_ENTRY     = 4,
  SEARCH_RESULT_DONE      = 5,
  MODIFY_REQUEST          = 6,
  MODIFY_RESPONSE         = 7,
  ADD_REQUEST             = 8,
  ADD_RESPONSE            = 9,
  DEL_REQUEST             = 10,
  DEL_RESPONSE            = 11,
  MOD_DN_REQUEST          = 12,
  MOD_DN_RESPONSE         = 13,
  COMPARE_REQUEST         = 14,
  COMPARE_RESPONSE        = 15,
  ABANDON_REQUEST         = 16,
  SEARCH_RESULT_REFERENCE = 19,
  EXTENDED_REQUEST        = 23,
  EXTENDED_RESPONSE       = 24,
  INTERMEDIATE_RESPONSE   = 25,
};

#- Result code ---------------------------------------------------------------
public type ResultCode = enum {
  SUCCESS                         = 0,
  OPERATIONS_ERROR                = 1,
  PROTOCOL_ERROR                  = 2,
  TIME_LIMIT_EXCEEDED             = 3,
  SIZE_LIMIT_EXCEEDED             = 4,
  COMPARE_FALSE                   = 5,
  COMPARE_TRUE                    = 6,
  AUTH_METHOD_NOT_SUPPORTED       = 7,
  STRONGER_AUTH_REQUIRED          = 8,
  PARTIAL_RESULTS                 = 9,
  REFERRAL                        = 10,
  ADMIN_LIMIT_EXCEEDED            = 11,
  UNAVAILABLE_CRITICAL_EXTENSION  = 12,
  CONFIDENTIALITY_REQUIRED        = 13,
  SASL_BIND_IN_PROGRESS           = 14,
  NO_SUCH_ATTRIBUTE               = 16,
  UNDEFINED_ATTRIBUTE_TYPE        = 17,
  INAPPROPRIATE_MATCHING          = 18,
  CONSTRAINT_VIOLATION            = 19,
  ATTRIBUTE_OR_VALUE_EXISTS       = 20,
  INVALID_ATTRIBUTE_SYNTAX        = 21,
  NO_SUCH_OBJECT                  = 32,
  ALIAS_PROBLEM                   = 33,
  INVALID_DNSYNTAX                = 34,
  ALIAS_DEREFERENCING_PROBLEM     = 36,
  INAPPROPRIATE_AUTHENTICATION    = 48,
  INVALID_CREDENTIALS             = 49,
  INSUFFICIENT_ACCESS_RIGHTS      = 50,
  BUSY                            = 51,
  UNAVAILABLE                     = 52,
  UNWILLING_TO_PERFORM            = 53,
  LOOP_DETECT                     = 54,
  SORT_CONTROL_MISSING            = 60,
  OFFSET_RANGE_ERROR              = 61,
  NAMING_VIOLATION                = 64,
  OBJECT_CLASS_VIOLATION          = 65,
  NOT_ALLOWED_ON_NON_LEAF         = 66,
  NOT_ALLOWED_ON_RDN              = 67,
  ENTRY_ALREADY_EXISTS            = 68,
  OBJECT_CLASS_MODS_PROHIBITED    = 69,
  RESULTS_TOO_LARGE               = 70,
  AFFECTS_MULTIPLE_DSAS           = 71,
  CONTROL_ERROR                   = 76,
  OTHER                           = 80,
  SERVER_DOWN                     = 81,
  LOCAL_ERROR                     = 82,
  ENCODING_ERROR                  = 83,
  DECODING_ERROR                  = 84,
  TIMEOUT                         = 85,
  AUTH_UNKNOWN                    = 86,
  FILTER_ERROR                    = 87,
  USER_CANCELED                   = 88,
  PARAM_ERROR                     = 89,
  NO_MEMORY                       = 90,
  CONNECT_ERROR                   = 91,
  NOT_SUPPORTED                   = 92,
  CONTROL_NOT_FOUND               = 93,
  NO_RESULTS_RETURNED             = 94,
  MORE_RESULTS_TO_RETURN          = 95,
  CLIENT_LOOP                     = 96,
  REFERRAL_LIMIT_EXCEEDED         = 97,
  INVALID_RESPONSE                = 100,
  AMBIGUOUS_RESPONSE              = 101,
  TLS_NOT_SUPPORTED               = 112,
  INTERMEDIATE_RESPONSE           = 113,
  UNKNOWN_TYPE                    = 114,
  LCUP_INVALID_DATA               = 115,
  LCUP_UNSUPPORTED_SCHEME         = 116,
  LCUP_RELOAD_REQUIRED            = 117,
  CANCELED                        = 118,
  NO_SUCH_OPERATION               = 119,
  TOO_LATE                        = 120,
  CANNOT_CANCEL                   = 121,
  ASSERTION_FAILED                = 122,
  AUTHORIZATION_DENIED            = 123,
};

#-----------------------------------------------------------------------------
public type Result = unit {
  code: ASN1::ASN1Message(True) &convert=cast<ResultCode>(cast<uint8>($$.body.num_value))
                                &default=ResultCode::Undef;
  matchedDN: ASN1::ASN1Message(True) &convert=$$.body.str_value
                                     &default="";
  diagnosticMessage: ASN1::ASN1Message(True) &convert=$$.body.str_value
                                             &default="";

  # TODO: if we want to parse referral URIs in result
  # https://tools.ietf.org/html/rfc4511#section-4.1.10
};

#-----------------------------------------------------------------------------
public type Messages = unit {
  : MessageWrapper[];
};

#-----------------------------------------------------------------------------
type SASLLayer = unit {
  # For the time being (before we support parsing the SASL layer) this unit
  # is used by MessageWrapper below to strip it (SASL) so that the parser
  # can attempt to resume parsing afterward. It also sets the success flag
  # if '\x30' is found, otherwise backtracks so that we can deal with encrypted
  # SASL payloads without raising a parse error.
  var success: bool = False;
  : bytes &until=b"\x30" {
    self.success = True;
  }

  on %error {
    self.backtrack();
  }
};

#-----------------------------------------------------------------------------
public type MessageWrapper = unit {
  # A wrapper around 'Message'. First, we try to parse a Message unit.
  # There are two possible outcomes:
  #   (1) Success -> We consumed all bytes and successfully parsed a Message unit
  #   (2) No success -> self.backtrack() is called in the Message unit,
  #                     so effectively we didn't consume any bytes yet.
  # The outcome can be determined by checking the `success` variable of the Message unit

  # This success variable is different, because this keeps track of the status for the MessageWrapper object
  var success: bool = False;
  var message: Message;

  # Here, we try to parse the message...
  : Message &try {

      # ... and only if the Message unit successfully parsed, we can set
      # the status of this MessageWrapper's success to 'True'
      if ( $$.success == True ) {
        self.success = True;
        self.message = $$;
      }
  }

  # If we failed to parse the message, then we're going to scan the remaining bytes for the '\x30'
  # start byte and try to parse a Message starting from that byte. This effectively
  # strips the SASL layer if SASL Signing was enabled. Until now, I haven't found A
  # better way to scan / determine the exact SASL header length yet, so we'll stick with this
  # for the time being. If the entire LDAP packet was encrypted with SASL, then we skip parsing for
  # now (in the long run we need to be parsing SASL/GSSAPI instead, in which case encrypted payloads
  # are just another message type).

  # SASLLayer (see unit above) just consumes bytes &until=b"\x30" or backtracks if it isn't found
  # and sets a success flag we can use later to decide if those bytes contain a parsable message.
  var sasl_success: bool = False;
  : SASLLayer &try if ( self.success == False ) {
    if ( $$.success == True ) {
      self.sasl_success = True;
    }
  }
  var remainder: bytes;

  # SASLLayer consumes the delimiter ('\x30'), and because this is the first byte of a valid LDAP message
  # we should re-add it to the remainder if the delimiter was found. If the delimeter was not found, we
  # leave the remainer empty, but note that the bytes must be consumed either way to avoid stalling the
  # parser and causing an infinite loop error.
  : bytes &eod if ( self.success == False )  {
    if ( self.sasl_success == True ) {
      self.remainder = b"\x30" + $$;
    }
  }

  # Again, try to parse a Message unit. Be aware that in this will sometimes fail if the '\x30' byte is
  # also present in the SASL header.

  # Also, we could try to do this recursively or try a few iterations, but for now I would suggest
  # to try this extra parsing once to get the best cost/benefit tradeoff.
  : Message &try &parse-from=self.remainder if ( self.success == False && self.sasl_success == True ) {
      if ( $$.success == True ) {
        self.success = True;
        self.message = $$;
      }
  }

  # If we still didn't manage to parse a message (so the &try resulted in another backtrack()) then
  # this is probably an encrypted LDAP message, so skip it

} &convert=self.message;

#-----------------------------------------------------------------------------
public type Message = unit {
  var messageID: int64;
  var opcode: ProtocolOpcode = ProtocolOpcode::Undef;
  var applicationBytes: bytes;
  var unsetResultDefault: Result;
  var result: Result& = self.unsetResultDefault;
  var obj: string = "";
  var arg: string = "";
  var success: bool = False;

  : ASN1::ASN1Message(True) {
    if (($$.head.tag.type_ == ASN1::ASN1Type::Sequence) &&
        ($$.body?.seq) &&
        (|$$.body.seq.submessages| >= 2)) {
      if ($$.body.seq.submessages[0].body?.num_value) {
        self.messageID = $$.body.seq.submessages[0].body.num_value;
      }
      if ($$.body.seq.submessages[1]?.application_id) {
        self.opcode = cast<ProtocolOpcode>(cast<uint8>($$.body.seq.submessages[1].application_id));
        self.applicationBytes = $$.body.seq.submessages[1].application_data;
      }
    }
  }

  switch ( self.opcode ) {
    ProtocolOpcode::BIND_REQUEST            -> BIND_REQUEST:            BindRequest(self);
    ProtocolOpcode::BIND_RESPONSE           -> BIND_RESPONSE:           BindResponse(self);
    ProtocolOpcode::UNBIND_REQUEST          -> UNBIND_REQUEST:          UnbindRequest(self);
    ProtocolOpcode::SEARCH_REQUEST          -> SEARCH_REQUEST:          SearchRequest(self);
    ProtocolOpcode::SEARCH_RESULT_ENTRY     -> SEARCH_RESULT_ENTRY:     SearchResultEntry(self);
    ProtocolOpcode::SEARCH_RESULT_DONE      -> SEARCH_RESULT_DONE:      SearchResultDone(self);
    ProtocolOpcode::MODIFY_REQUEST          -> MODIFY_REQUEST:          ModifyRequest(self);
    ProtocolOpcode::MODIFY_RESPONSE         -> MODIFY_RESPONSE:         ModifyResponse(self);
    ProtocolOpcode::ADD_RESPONSE            -> ADD_RESPONSE:            AddResponse(self);
    ProtocolOpcode::DEL_REQUEST             -> DEL_REQUEST:             DelRequest(self);
    ProtocolOpcode::DEL_RESPONSE            -> DEL_RESPONSE:            DelResponse(self);
    ProtocolOpcode::MOD_DN_RESPONSE         -> MOD_DN_RESPONSE:         ModDNResponse(self);
    ProtocolOpcode::COMPARE_RESPONSE        -> COMPARE_RESPONSE:        CompareResponse(self);
    ProtocolOpcode::ABANDON_REQUEST         -> ABANDON_REQUEST:         AbandonRequest(self);

    # TODO: not yet implemented, redirect to NotImplemented because when we're
    # just commenting this out, it will stop processing LDAP Messages in this connection
    ProtocolOpcode::ADD_REQUEST             -> ADD_REQUEST:             NotImplemented(self);
    ProtocolOpcode::COMPARE_REQUEST         -> COMPARE_REQUEST:         NotImplemented(self);
    ProtocolOpcode::EXTENDED_REQUEST        -> EXTENDED_REQUEST:        NotImplemented(self);
    ProtocolOpcode::EXTENDED_RESPONSE       -> EXTENDED_RESPONSE:       NotImplemented(self);
    ProtocolOpcode::INTERMEDIATE_RESPONSE   -> INTERMEDIATE_RESPONSE:   NotImplemented(self);
    ProtocolOpcode::MOD_DN_REQUEST          -> MOD_DN_REQUEST:          NotImplemented(self);
    ProtocolOpcode::SEARCH_RESULT_REFERENCE -> SEARCH_RESULT_REFERENCE: NotImplemented(self);
  } &parse-from=self.applicationBytes if ( self.opcode );

  on %error {
    self.backtrack();
  }

  on %done {
    self.success = True;
  }

} &requires=((self?.messageID) && (self?.opcode) && (self.opcode != ProtocolOpcode::Undef));

#-----------------------------------------------------------------------------
# Bind Operation
# https://tools.ietf.org/html/rfc4511#section-4.2

public type BindAuthType = enum {
  BIND_AUTH_SIMPLE = 0,
  BIND_AUTH_SASL = 3,
};

type SaslCredentials = unit() {
  mechanism: ASN1::ASN1Message(True) &convert=$$.body.str_value;
  # TODO: if we want to parse the (optional) credentials string
};

# TODO(fox-ds): A helper unit for requests for which no handling has been implemented.
# Eventually all uses of this unit should be replaced with actual parsers so this unit can be removed.
type NotImplemented = unit(inout message: Message) {
  # Do nothing
};

type BindRequest = unit(inout message: Message) {
  version: ASN1::ASN1Message(True) &convert=$$.body.num_value;
  name: ASN1::ASN1Message(True) &convert=$$.body.str_value {
    message.obj = self.name;
  }
  var authType: BindAuthType = BindAuthType::Undef;
  var authData: bytes = b"";
  var simpleCreds: string = "";

  : ASN1::ASN1Message(True) {
    if ($$?.application_id) {
      self.authType = cast<BindAuthType>(cast<uint8>($$.application_id));
      self.authData = $$.application_data;
    }
    if ((self.authType == BindAuthType::BIND_AUTH_SIMPLE) && (|self.authData| > 0)) {
      self.simpleCreds = self.authData.decode();
      if (|self.simpleCreds| > 0) {
        message.arg = self.simpleCreds;
      }
    }
  }
  saslCreds: SaslCredentials() &parse-from=self.authData if ((self.authType == BindAuthType::BIND_AUTH_SASL) &&
                                                             (|self.authData| > 0)) {
    message.arg = self.saslCreds.mechanism;
  }
} &requires=((self?.authType) && (self.authType != BindAuthType::Undef));

type BindResponse = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }

  # TODO: if we want to parse SASL credentials returned
};

#-----------------------------------------------------------------------------
# Unbind Operation
# https://tools.ietf.org/html/rfc4511#section-4.3

type UnbindRequest = unit(inout message: Message) {
  # this page intentionally left blank
};

#-----------------------------------------------------------------------------
# Search Operation
# https://tools.ietf.org/html/rfc4511#section-4.5

public type SearchScope = enum {
  SEARCH_BASE    = 0,
  SEARCH_SINGLE  = 1,
  SEARCH_TREE    = 2,
};

public type SearchDerefAlias = enum {
  DEREF_NEVER        = 0,
  DEREF_IN_SEARCHING = 1,
  DEREF_FINDING_BASE = 2,
  DEREF_ALWAYS       = 3,
};

type FilterType = enum {
  FILTER_AND     = 0,
  FILTER_OR      = 1,
  FILTER_NOT     = 2,
  FILTER_EQ      = 3,
  FILTER_SUBSTR  = 4,
  FILTER_GE      = 5,
  FILTER_LE      = 6,
  FILTER_PRESENT = 7,
  FILTER_APPROX  = 8,
  FILTER_EXT     = 9,
  FILTER_INVALID = 254,
};

public type AttributeSelection = unit {
  var attributes: vector<string>;

  # TODO: parse AttributeSelection as per
  # https://tools.ietf.org/html/rfc4511#section-4.5.1
  # and decide how deep that should be fleshed out.
  : ASN1::ASN1Message(True) {
    if (($$.head.tag.type_ == ASN1::ASN1Type::Sequence) &&
        ($$.body?.seq)) {
      for (i in $$.body.seq.submessages) {
        if (i.body?.str_value) {
          self.attributes.push_back(i.body.str_value);
        }
      }
    }
  }
};

type AttributeValueAssertion = unit {
  var desc: string = "";
  var val: string = "";

  : ASN1::ASN1Message(True) {
    if (($$.head.tag.type_ == ASN1::ASN1Type::Sequence) &&
        ($$.body?.seq) &&
        (|$$.body.seq.submessages| >= 2)) {
      if ($$.body.seq.submessages[0].body?.str_value) {
        self.desc = $$.body.seq.submessages[0].body.str_value;
      }
      if ($$.body.seq.submessages[1].body?.str_value) {
        self.val = $$.body.seq.submessages[1].body.str_value;
      }
    }
  }
};

# An AND or OR search filter can consist of many sub-searchfilters, so we try to parse these
type ParseNestedAndOr = unit {
    searchfilters: SearchFilter[] &eod;
};

type ParseNestedNot = unit {
    searchfilter: SearchFilter;
};

# Helper functions to properly format some custom data structures

public function utf16_guid_to_hex_repr(bts: bytes) : string {
  # Rather ugly workaround to pretty-print the CLDAP DomainGuid UTF16-LE encoded string
  # in the same format as Wireshark (aabbccdd-eeff-gghh-iijj-kkllmmnnoopp)

  # We need to have exactly 16 bytes...
  if ( |bts| != 16 ) {
    # ... and otherwise just return an error code
    return "GUID_FORMAT_FAILED";
  }

  local ret = "";
  for ( i in [[3, 2, 1, 0], [5, 4], [7, 6], [8, 9],  [10, 11, 12, 13, 14, 15]] ) {
    for ( j in i ) {
      local bt: uint8 = *bts.at(j);
      ret = ret + "%02x" % bt;
      if ( j in [0, 4, 6, 9] ) {
        ret = ret + "-";
      }
    }
  }
  return ret;
}

public function bytes_sid_to_hex_repr(bts: bytes) : string {
  local ret = "";
  local cnt = 0;

  while ( cnt < |bts| ) {
    local bt: uint8 = *bts.at(cnt);
    ret = ret + "%02x" % bt;

    if ( cnt < |bts|-1 ) {
      ret = ret + ":";
    }
    cnt += 1;
  }
  return ret;
}

public function bytes_sid_to_SID_repr(bts: bytes) : string {
  # Example: SID -> S-1-5-21-1153942841-488947194-1912431946

  # Needs to be exactly 24 bytes
  if ( |bts| != 24 ) {
    # ... and otherwise just return an error code
    return "SID_FORMAT_FAILED";
  }

  local ret = "S-";
  local cnt = 0;

  # Mixed little and big endian, so turn everything to big endian first...
  # Byte 1 seems to be skipped when parsing the SID
  for ( i in [[0], [2, 3, 4, 5, 6, 7], [11, 10, 9, 8], [15, 14, 13, 12], [19, 18, 17, 16], [23, 22, 21, 20]] ) {
    local dec_val_rep: bytes = b"";
    for ( j in i ) {
      local bt: uint8 = *bts.at(j);
      dec_val_rep += bt;
      cnt += 1;
    }

    # ... so we can represent this integer value in big endian
    ret = ret + "%u" % dec_val_rep.to_uint(spicy::ByteOrder::Big);

    # Only print the dash when we're not at the end
    if ( cnt < 23 ) {
      ret = ret + "-";
    }
  }
  return ret;
}


public function uint32_to_hex_repr(bts: bytes) : string {
  # Needs to be exactly 4 bytes
  if ( |bts| != 4 ) {
    # ... and otherwise just return an error code
    return "HEX_FORMAT_FAILED";
  }

  # Workaround to print the hex value of an uint32, prepended with '0x'
  local ret = "0x";
  for ( i in [3, 2, 1, 0] ) {
    local bt: uint8 = *bts.at(i);
    ret = ret + "%02x" % bt;
  }
  return ret;
}

# Helper to compute a string representation of a `SearchFilter`.
public function string_representation(search_filter: SearchFilter): string {
    local repr: string;

    switch ( local fType = search_filter.filterType ) {
      # The NOT, AND and OR filter types are trees and may hold many leaf nodes. So recursively get
      # the stringPresentations for the leaf nodes and add them all in one final statement.

      case FilterType::FILTER_NOT: {
        repr = "(!%s)" % search_filter.FILTER_NOT.searchfilter.stringRepresentation;
      }

      case FilterType::FILTER_AND, FilterType::FILTER_OR: {
        local nestedObj: ParseNestedAndOr;
        local printChar = "";

        if ( fType == FilterType::FILTER_AND ) {
          printChar = "&";
          nestedObj = search_filter.FILTER_AND;
        } else {
          printChar = "|";
          nestedObj = search_filter.FILTER_OR;
        }

        # Build the nested AND/OR statement in this loop. When we encounter the first element,
        # we open the statement. At the second element, we close our first complete statement. For every
        # following statement, we extend the AND/OR statement by wrapping it around the already completed
        # statement. Although it is also valid to not do this wrapping, which is logically equivalent, e.g:
        #
        #           (1)                         (2)
        #   (?(a=b)(c=d)(e=f))    vs   (?(?(a=b)(c=d))(e=f))
        #
        # the latter version is also shown by Wireshark. So although the parsed structure actually represents
        # version (1) of the query, we now choose to print version (2). If this is not desirable, swap the code
        # for the following:
        #
        # # Construct the nested structure, like (1)
        # for ( SF in nestedObj.searchfilters ) {
        #    self.stringRepresentation = self.stringRepresentation + SF.stringRepresentation
        # }
        # # Close it with brackets and put the correct printChar for AND/OR in the statement
        # self.stringRepresentation =  "(%s" % printChar + self.stringRepresentation + ")";
        #

        local i = 0;
        for ( searchFilter in nestedObj.searchfilters ) {
          switch ( i ) {
            case 0: {
              repr = "(%s%s%s" % (
                  printChar,
                  searchFilter.stringRepresentation,
                  # If we have exactly one element immediately close the statement since we are done.
                  |nestedObj.searchfilters| == 1 ? ")" : ""
              );
            }
            case 1: {
              repr = repr + searchFilter.stringRepresentation + ")";
            }
            default: {
              repr = "(%s" % printChar + repr + searchFilter.stringRepresentation + ")";
            }
          }
          i += 1;
        }
      }

    # The following FilterTypes are leaf nodes and can thus be represented in a statement

      case FilterType::FILTER_EXT: {
        # For extended search filters the meaning of the individual fields in
        # `DecodedAttributeValue` is slightly different.
        repr = "(%s:%s:=%s)" % (search_filter.FILTER_EXT.assertionValueDecoded,
                                search_filter.FILTER_EXT.attributeDesc.decode(),
                                search_filter.FILTER_EXT.matchValue);
      }
      case FilterType::FILTER_APPROX: {
        repr = "(%s~=%s)" % (search_filter.FILTER_APPROX.attributeDesc.decode(),
                             search_filter.FILTER_APPROX.assertionValueDecoded);
      }
      case FilterType::FILTER_EQ: {
        repr = "(%s=%s)" % (search_filter.FILTER_EQ.attributeDesc.decode(),
                            search_filter.FILTER_EQ.assertionValueDecoded);
      }
      case FilterType::FILTER_GE: {
        repr = "(%s>=%s)" % (search_filter.FILTER_GE.attributeDesc.decode(),
                             search_filter.FILTER_GE.assertionValueDecoded);
      }
      case FilterType::FILTER_LE: {
        repr = "(%s<=%s)" % (search_filter.FILTER_LE.attributeDesc.decode(),
                             search_filter.FILTER_LE.assertionValueDecoded);
      }
      case FilterType::FILTER_SUBSTR: {
        local anys: string = "";
        if ( |search_filter.FILTER_SUBSTR.anys| > 0 )
          anys = b"*".join(search_filter.FILTER_SUBSTR.anys).decode() + "*";

        repr  = "(%s=%s*%s%s)" % (search_filter.FILTER_SUBSTR.attributeDesc.decode(),
                                  search_filter.FILTER_SUBSTR.initial,
                                  anys,
                                  search_filter.FILTER_SUBSTR.final);
      }
      case FilterType::FILTER_PRESENT: {
        repr = "(%s=*)" % search_filter.FILTER_PRESENT;
      }
    }

    return repr;
}

# Represents an (extended) key-value pair present in SearchFilters
type DecodedAttributeValue = unit(fType: FilterType) {
  var assertionValueDecoded: string = "";

  : uint8;
  attributeDesc_len: uint8;
  attributeDesc: bytes &size=self.attributeDesc_len;

  : uint8;
  assertionValue_len: uint8;
  assertionValue: bytes &size=self.assertionValue_len;

  # Only for the FILTER_EXT type, parse extra fields
  : uint8 if ( fType == FilterType::FILTER_EXT );
  matchValue_len: uint8 if( fType == FilterType::FILTER_EXT );
  matchValue: bytes &size=self.matchValue_len if ( fType == FilterType::FILTER_EXT );

  on %done {
    switch ( self.attributeDesc ) {
      # Special parsing required for some CLDAP attributes,
      # see https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/895a7744-aff3-4f64-bcfa-f8c05915d2e9

      case b"DomainGuid": {
        self.assertionValueDecoded = utf16_guid_to_hex_repr(self.assertionValue);
      }

      case b"objectSid", b"AAC": {
        self.assertionValueDecoded = bytes_sid_to_hex_repr(self.assertionValue);
      }

      case b"DomainSid": {
        self.assertionValueDecoded = bytes_sid_to_SID_repr(self.assertionValue);
      }

      case b"NtVer": {
        self.assertionValueDecoded = uint32_to_hex_repr(self.assertionValue);
      }

      # By default, decode with UTF-8
      default: {
        self.assertionValueDecoded = self.assertionValue.decode();
      }
    }
  }
};

type SubstringFilter = unit {
  var initial: string;
  var final: string;
  var anys: vector<string>;

  : uint8;  # filter tag
  attributeDesc_len: uint8;
  attributeDesc: bytes &size=self.attributeDesc_len;

  # Crunch through the sequence/choice of substrings.
  #
  # https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1
  header: ASN1::ASN1Header;
  : ASN1::ASN1Message(False)[] &size=self.header.len.len foreach {
    local data = $$.application_data.decode();
    if ( $$.application_id == 0 ) {
      self.initial = data;
    } else if ( $$.application_id == 1 ) {
      self.anys.push_back(data);
    } else if ( $$.application_id == 2 ) {
      self.final = data;
    } else {
      throw "invalid substring choice %s" % $$.application_id;
    }
  }
};

type SearchFilter = unit {
  var filterType: FilterType = FilterType::Undef;
  var filterBytes: bytes = b"";
  var filterLen: uint64 = 0;
  var stringRepresentation: string = "";

  : ASN1::ASN1Message(True) {
    if ($$?.application_id) {
      self.filterType = cast<FilterType>(cast<uint8>($$.application_id));
      self.filterBytes = $$.application_data;
      self.filterLen = $$.head.len.len;
    } else {
      self.filterType = FilterType::FILTER_INVALID;
    }
  }

  switch ( self.filterType ) {

    # FilterTypes that hold one or more SearchFilters inside them

    FilterType::FILTER_AND     -> FILTER_AND:     ParseNestedAndOr()
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_OR      -> FILTER_OR:      ParseNestedAndOr()
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_NOT     -> FILTER_NOT:     ParseNestedNot()
                                                  &parse-from=self.filterBytes;

    # FilterTypes that we can actually convert to a string

    FilterType::FILTER_EQ      -> FILTER_EQ:      DecodedAttributeValue(FilterType::FILTER_EQ)
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_SUBSTR  -> FILTER_SUBSTR:  SubstringFilter
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_GE      -> FILTER_GE:      DecodedAttributeValue(FilterType::FILTER_GE)
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_LE      -> FILTER_LE:      DecodedAttributeValue(FilterType::FILTER_LE)
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_APPROX  -> FILTER_APPROX:  DecodedAttributeValue(FilterType::FILTER_APPROX)
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_EXT     -> FILTER_EXT:     DecodedAttributeValue(FilterType::FILTER_EXT)
                                                  &parse-from=self.filterBytes;
    FilterType::FILTER_PRESENT -> FILTER_PRESENT: ASN1::ASN1OctetString(self.filterLen, False)
                                                  &convert=$$.value.decode(spicy::Charset::ASCII)
                                                  &parse-from=self.filterBytes;
  };

  # So when you're done with recursively parsing the filters, we can now leverage the tree structure to
  # recursively get the stringRepresentations for those leafs, which are SearchFilters

  on %done {
    self.stringRepresentation = string_representation(self);
  }

  on %error {
    self.stringRepresentation = "FILTER_PARSING_ERROR";
  }

};

public type SearchRequest = unit(inout message: Message)  {
  baseObject: ASN1::ASN1Message(True) &convert=$$.body.str_value {
    message.obj = self.baseObject;
  }
  scope: ASN1::ASN1Message(True) &convert=cast<SearchScope>(cast<uint8>($$.body.num_value))
                                 &default=SearchScope::Undef {
    message.arg = "%s" % self.scope;
  }
  deref: ASN1::ASN1Message(True) &convert=cast<SearchDerefAlias>(cast<uint8>($$.body.num_value))
                                 &default=SearchDerefAlias::Undef;
  sizeLimit: ASN1::ASN1Message(True) &convert=$$.body.num_value &default=0;
  timeLimit: ASN1::ASN1Message(True) &convert=$$.body.num_value &default=0;
  typesOnly: ASN1::ASN1Message(True) &convert=$$.body.bool_value &default=False;
  filter: SearchFilter &convert=$$.stringRepresentation;
  attributes: AttributeSelection &convert=$$.attributes;
};

type SearchResultEntry = unit(inout message: Message) {
  objectName: ASN1::ASN1Message(True) &convert=$$.body.str_value {
    message.obj = self.objectName;
  }
  # TODO: if we want to descend down into PartialAttributeList
  attributes: ASN1::ASN1Message(True);
};

type SearchResultDone = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }
};

# TODO: implement SearchResultReference
# type SearchResultReference = unit(inout message: Message) {
#
# };

#-----------------------------------------------------------------------------
# Modify Operation
# https://tools.ietf.org/html/rfc4511#section-4.6

type ModifyRequest = unit(inout message: Message) {
  objectName: ASN1::ASN1Message(True) &convert=$$.body.str_value {
    message.obj = self.objectName;
  }

  # TODO: parse changes
};

type ModifyResponse = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }
};

#-----------------------------------------------------------------------------
# Add Operation
# https://tools.ietf.org/html/rfc4511#section-4.7

# TODO: implement AddRequest
# type AddRequest = unit(inout message: Message) {
#
#
# };

type AddResponse = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }
};

#-----------------------------------------------------------------------------
# Delete Operation
# https://tools.ietf.org/html/rfc4511#section-4.8

type DelRequest = unit(inout message: Message) {
  objectName: ASN1::ASN1Message(True) &convert=$$.body.str_value {
    message.obj = self.objectName;
  }
};

type DelResponse = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }
};

#-----------------------------------------------------------------------------
# Modify DN Operation
# https://tools.ietf.org/html/rfc4511#section-4.8

# TODO: implement ModDNRequest
# type ModDNRequest = unit(inout message: Message) {
#
# };

type ModDNResponse = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }
};

#-----------------------------------------------------------------------------
# Compare Operation
# https://tools.ietf.org/html/rfc4511#section-4.10

# TODO: implement CompareRequest
# type CompareRequest = unit(inout message: Message) {
#
# };

type CompareResponse = unit(inout message: Message) {
  : Result {
    message.result = $$;
  }
};

#-----------------------------------------------------------------------------
# Abandon Operation
# https://tools.ietf.org/html/rfc4511#section-4.11

type AbandonRequest = unit(inout message: Message) {
  messageID: ASN1::ASN1Message(True) &convert=$$.body.num_value {
    message.obj = "%d" % (self.messageID);
  }
};

#-----------------------------------------------------------------------------
# Extended Operation
# https://tools.ietf.org/html/rfc4511#section-4.12

# TODO: implement ExtendedRequest
# type ExtendedRequest = unit(inout message: Message) {
#
# };

# TODO: implement ExtendedResponse
# type ExtendedResponse = unit(inout message: Message) {
#
# };

#-----------------------------------------------------------------------------
# IntermediateResponse Message
# https://tools.ietf.org/html/rfc4511#section-4.13

# TODO: implement IntermediateResponse
# type IntermediateResponse = unit(inout message: Message) {
#
# };
